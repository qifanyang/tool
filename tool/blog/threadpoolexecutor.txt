poolSize	corePoolSize	maximumPoolSize

if(poolSize<corePoolSize){
	//新增任务一直新建线程,addIfUnderCorePoolSize(command)

}else if(poolSize>=corePoolSize){
	//新增任务放入workQueue,如果队列满了导致放入失败,新建线程处理任务addIfUnderMaximumPoolSize(command)
	
	//如果addIfUnderMaximumPoolSize(command)失败,调用异常处理 reject(command); 默认抛出异常

}

workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS);
如果在等待的时间内没有从任务队列中取得任务并且poolSize>corePoolSize,则该线程退出

l  如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。

l  如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。

l  如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。

l  如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。

l  当线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数